{"version":3,"sources":["firebase.js","Footer.js","HomePage.js","CheckBox.js","FormPage.js","ResPage.js","ResCard.js","SavedPage.js","App.js","serviceWorker.js","index.js","img/man-thinking.jpeg"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","Footer","className","id","href","Component","HomePage","aria-labelledby","src","image","alt","role","aria-label","to","process","CheckBox","props","htmlFor","onChange","handleCheckChieldElement","type","checked","isChecked","value","name","FormPage","event","options","state","forEach","option","target","setState","result","filter","res","map","ele","onUpdate","this","placeholder","key","location","categories","onClick","preventDefault","ResPage","potential","curr","handleNext","bind","handleSave","config","formInfo","headers","params","distance","price","open_now","axios","get","checkParam","then","data","businesses","randomRes","Math","floor","random","length","display_address","join","catch","error","console","log","response","savedRef","database","ref","child","user","uid","rating","image_url","url","set","isLoggedIn","rel","onBack","ResCard","handleDelete","resName","userID","currentUser","remove","SavedPage","restaurants","resData","Object","keys","push","App","handleChange","resetState","login","logout","signInWithPopup","on","snapshot","saved","val","signOut","stateChanges","Navbar","expand","Brand","Toggle","aria-controls","Collapse","Nav","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.578bb805.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyCylhICJDdE85iwyMtI9PdG5yaMPW29MXk\",\n  authDomain: \"restaurant-finder-f6e4d.firebaseapp.com\",\n  databaseURL: \"https://restaurant-finder-f6e4d.firebaseio.com\",\n  projectId: \"restaurant-finder-f6e4d\",\n  storageBucket: \"restaurant-finder-f6e4d.appspot.com\",\n  messagingSenderId: \"1098062858225\",\n  appId: \"1:1098062858225:web:1ff714f619f0b44ae2e650\",\n  measurementId: \"G-1ZHWES7RX1\"\n};\n\nfirebase.initializeApp(config);\n\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\nexport default firebase;","import React, { Component } from 'react'; //import React Component\n\nexport class Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <div className=\"footer text-center py-3\">\n                    <p id=\"contact\">\n                        Contact Information: <a href=\"mailto:kayla900@uw.edu\">kayla900@uw.edu</a> or <a\n                            href=\"mailto:divij@uw.edu\">divij@uw.edu</a>\n                    </p>\n\n                    <p>\n                        @2020 Copyright: Kayla C. and Divij S.\n                </p>\n                </div>\n            </footer>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport image from './img/man-thinking.jpeg';\nimport { Footer } from './Footer';\n\nexport class HomePage extends Component {\n  render() {\n    return (\n      <>\n        <hr></hr>\n\n        <header>\n          <h1>About Restaurant Picker</h1>\n        </header>\n\n        <main>\n          <div className=\"project-desc\">\n            <div>\n              <div id=\"mission\">\n                <p>Our mission is to help people save precious time spent on deciding where to eat. With our application, users can generate a random open restaurant that matches their preferences.</p>\n              </div>\n\n              <p id=\"features-label\"><strong>Features:</strong></p>\n              <ul aria-labelledby=\"features-label\">\n                <li>Find nearby restaurants based on your location</li>\n                <li>Filter restaurants by food categories, price, and distance</li>\n                <li>View relevant information about the selected restaurant</li>\n                <li>Save restaurants and view them later on</li>\n              </ul>\n            </div>\n\n            <img src={image} alt=\"Man sitting down and staring at his laptop\"/>\n          </div>\n\n          <div className=\"text-center\">\n            <Link role=\"button\" aria-label=\"Go to form\" className=\"btn btn-dark start-btn\" to={process.env.PUBLIC_URL + '/form'}>Lets get started!</Link>\n          </div>\n        </main>\n\n        <Footer></Footer>\n      </>\n    );\n  }\n}","import React from 'react'\n\nexport const CheckBox = props => {\n    return (\n      <div className=\"form-check\">\n        <label className=\"form-check-label\" htmlFor={props.id}>\n        <input className=\"form-check-input\" onChange={props.handleCheckChieldElement} type=\"checkbox\" checked={props.isChecked} value={props.value} /> \n        {props.name}\n        </label>\n      </div>\n    )\n}\n\nexport default CheckBox","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport { Footer } from './Footer';\nimport CheckBox from './CheckBox';\n\nexport class FormPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: [\n                { id: 1, value: \"asianfusion\", name: \"Asian\", isChecked: false },\n                { id: 2, value: \"bbq\", name: \"BBQ\", isChecked: false },\n                { id: 3, value: \"chinese\", name: \"Chinese\", isChecked: false },\n                { id: 4, value: \"hotdogs\", name: \"Fastfood\", isChecked: false },\n                { id: 5, value: \"hawaiian\", name: \"Hawaiian\", isChecked: false },\n                { id: 6, value: \"indpak\", name: \"Indian\", isChecked: false },\n                { id: 7, value: \"italian\", name: \"Italian\", isChecked: false },\n                { id: 8, value: \"japanese\", name: \"Japanese\", isChecked: false },\n                { id: 9, value: \"korean\", name: \"Korean\", isChecked: false },\n                { id: 10, value: \"mexican\", name: \"Mexican\", isChecked: false },\n                { id: 11, value: \"pizza\", name: \"Pizza\", isChecked: false },\n                { id: 12, value: \"sushi\", name: \"Sushi\", isChecked: false },\n                { id: 13, value: \"thai\", name: \"Thai\", isChecked: false },\n                { id: 14, value: \"vegan\", name: \"Vegan\", isChecked: false },\n                { id: 15, value: \"vegetarian\", name: \"Vegetarian\", isChecked: false }\n            ],\n        }\n    }\n\n    // Toggles checkboxes on and off. Keeps track of which checkboxes are checked. \n    handleCheckChieldElement = (event) => {\n        let options = this.state.options;\n        options.forEach(option => {\n            if (option.value === event.target.value)\n                option.isChecked = event.target.checked\n        })\n\n        this.setState({ options: options }, () => {\n            let result = options.filter(res => res.isChecked).map(ele => ele.value);\n            this.props.onUpdate('categories', result);\n        });\n    }\n\n    render() {\n        let onUpdate = this.props.onUpdate;\n\n        return (\n            <>\n                <hr></hr>\n\n                <header>\n                    <h1>Find a restaurant</h1>\n                </header>\n\n                <main>\n                    <form aria-label=\"Submit restaurant preferences\">\n                        <div className=\"form-content\">\n                            <div className=\"form-group\">\n                                <label htmlFor=\"location\">Location:</label>\n                                <input type=\"text\" name=\"location\" className=\"form-control\" id=\"location\" placeholder=\"Enter address, city, or zip code\" onChange={(event) => onUpdate(event.target.name, event.target.value)} />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"distance\">Price:</label>\n                                <select className=\"form-control\" id=\"price\" name=\"price\" onChange={(event) => onUpdate(event.target.name, event.target.value)}>\n                                    <option value=\"1\">$</option>\n                                    <option value=\"2\">$$</option>\n                                    <option value=\"3\">$$$</option>\n                                    <option value=\"4\">$$$$</option>\n                                </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"distance\">Max distance (select one):</label>\n                                <select className=\"form-control\" id=\"distance\" name=\"distance\" onChange={(event) => onUpdate(event.target.name, event.target.value)}>\n                                    <option value=\"1609\">&lt; 1 mile</option>\n                                    <option value=\"8047\">&lt; 5 miles</option>\n                                    <option value=\"16093\">&lt; 10 miles</option>\n                                    <option value=\"24140\">&lt; 15 miles</option>\n                                    <option value=\"32187\">&lt; 20 miles</option>\n                                </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <p id=\"checkbox-label\">What are you in the mood for?</p>\n                                {\n                                    this.state.options.map((option) => {\n                                        return (<CheckBox key={option.id} handleCheckChieldElement={this.handleCheckChieldElement}  {...option} />)\n                                    })\n                                }\n                            </div>\n\n                            {/* Shows disabled button until the form is properly filled in. */}\n                            {\n                                this.props.location && this.props.categories\n                                    ? <Link role=\"button\" aria-label=\"Go to restaurant\" className=\"btn btn-dark start-btn\" to={process.env.PUBLIC_URL + '/res'}>Go!</Link>\n                                    : <Link role=\"button\" to=\"/\" className=\"btn btn-outline-dark disabled\" onClick={(event) => event.preventDefault()}>Go!</Link>\n                            }\n                        </div>\n                    </form>\n                </main>\n\n                <Footer></Footer>\n            </>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport firebase from './firebase.js';\nimport axios from 'axios';\n\nimport { Footer } from './Footer';\n\nexport class ResPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            potential: [],\n            curr: '',\n            location: ''\n        };\n\n        this.handleNext = this.handleNext.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n    }\n\n    // Creates parameters for the Yelp Fusion API based on the user's preferences.\n    checkParam() {\n        let config = '';\n        if (this.props.formInfo) {\n            config = {\n                headers: { 'Authorization': 'Bearer t10OHYRfo3GYd6y-YdlHTkGWv8yX9VQegs5ucOD8KrVnfED2v6wceVS-WRRP8B3nbA5_wXQfD2A4OvG1B2lmzFB3MCkbP3keFNOcvZuD8hjbvsWF0SRI8IoUQYNhXnYx' },\n                params: {\n                    location: this.props.formInfo.location,\n                    distance: this.props.formInfo.distance,\n                    price: this.props.formInfo.price,\n                    categories: this.props.formInfo.categories,\n                    open_now: true\n                }\n            };\n        }\n\n        return (config);\n    }\n\n    // Calls the Yelp Fusion API and updates the list of potential restaurants with the returned results. Randomly chooses one restaurant and assigns it to be the current restaurant in the state. \n    componentDidMount() {\n        axios.get('https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?', this.checkParam())\n            .then(res => {\n                this.setState({ potential: res.data.businesses });\n                let randomRes = (this.state.potential)[Math.floor(Math.random() * (this.state.potential).length)];\n                this.setState({ curr: randomRes });\n                let location = randomRes.location.display_address.join(' ');\n                this.setState({ location: location })\n            })\n            .catch(error => {\n                console.log(error.response)\n            });\n    }\n\n    // Randomly chooses another restaurant from the list of potential restaurants and assigns it to be the current restaurant in the state.\n    handleNext() {\n        let randomRes = (this.state.potential)[Math.floor(Math.random() * (this.state.potential).length)];\n        this.setState({ curr: randomRes });\n        let location = randomRes.location.display_address.join(' ');\n        this.setState({ location: location })\n    }\n\n    // Adds restaurant to the user's list of saved restaurants.\n    handleSave() {\n        let curr = this.state.curr;\n\n        let savedRef = firebase.database().ref('saved').child(this.props.user.uid);\n        let res = {\n            location: this.state.location,\n            rating: curr.rating,\n            price: curr.price,\n            image: curr.image_url,\n            url: curr.url\n        }\n        savedRef.child(curr.name).set(res);\n    }\n\n    render() {\n        let curr = this.state.curr;\n        let isLoggedIn = this.props.user;\n\n        return (\n            <>\n                <header>\n                    <h1>Find a Restaurant</h1>\n                </header>\n                <main>\n                    <div className=\"restaurant-card\">\n                        <img id=\"image\" src={curr.image_url} alt=\"Restaurant of interest\" />\n\n                        <div className=\"restaurant-info\">\n                            <p>\n                                <strong>Restaurant Name: </strong>\n                                {curr.name}\n                            </p>\n\n                            <p>\n                                <strong>Location: </strong>\n                                {this.state.location}\n                            </p>\n\n                            <p>\n                                <strong>Rating: </strong>\n                                {curr.rating}\n                            </p>\n\n                            <p>\n                                <strong>Price: </strong>\n                                {curr.price}\n                            </p>\n\n                            <a role=\"button\" aria-label=\"Learn more\" className=\"btn btn-dark\" href={curr.url} rel=\"noopener noreferrer\" target=\"_blank\">Learn more</a>\n                            {/* Shows save button if a user is logged in, otherwise prompts the user to log in to save. */}\n                            {isLoggedIn\n                                ? <button type=\"button\" className=\"btn btn-secondary\" onClick={this.handleSave}>Save</button>\n                                : <p id='save-reminder'>Please sign in to save</p>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"choice-buttons\">\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.handleNext}>Next restaurant</button>\n                        <Link role=\"button\" aria-label=\"Go to form\" className=\"btn btn-secondary start-btn\" onClick={this.props.onBack} to={process.env.PUBLIC_URL + '/form'}>Go back</Link>\n                    </div>\n                </main>\n                <Footer></Footer>\n            </>\n        )\n    }\n}","import React, { Component } from 'react';\nimport firebase from './firebase.js';\n\nexport class ResCard extends Component {\n    constructor(props) {\n        super(props)\n\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    // Deletes restaurant from user's list of saved restaurants.\n    handleDelete(resName) {\n        let userID = firebase.auth().currentUser.uid;\n        firebase.database().ref('saved/' + userID + '/' + resName).remove();\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"saved-res\" id={this.props.name}>\n                    <img id=\"image\" src={this.props.image} alt=\"Restaurant of interest\" />\n\n                    <div className=\"restaurant-info\">\n                        <p>\n                            <strong>Restaurant Name: </strong>\n                            <a href={this.props.url} rel=\"noopener noreferrer\" target=\"_blank\">{this.props.name}</a>\n                        </p>\n\n                        <p>\n                            <strong>Location: </strong>\n                            {this.props.location}\n                        </p>\n\n                        <p>\n                            <strong>Rating: </strong>\n                            {this.props.rating}\n                        </p>\n\n                        <p>\n                            <strong>Price: </strong>\n                            {this.props.price}\n                        </p>\n                    </div>\n\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={() => this.handleDelete(this.props.name)}>Delete</button>\n                </div>\n\n            </>\n        );\n    }\n\n}\n","import React, { Component } from 'react';\n\nimport { Footer } from './Footer';\nimport { ResCard } from './ResCard';\n\nexport class SavedPage extends Component {\n    render() {\n        let restaurants = [];\n        let isLoggedIn = this.props.user;\n\n        if (this.props.res) {\n            let resData = this.props.res;\n\n            // Creates a restaurant card for all of a user's saved restaurants.\n            Object.keys(resData).map(key => {\n                restaurants.push(\n                    <ResCard key={key} name={key} location={resData[key].location} rating={resData[key].rating} price={resData[key].price} image={resData[key].image} url={resData[key].url}></ResCard>\n                )\n            })\n        }\n\n        return (\n            <>\n                <hr></hr>\n                <header>\n                    <h1>Saved Restaurants</h1>\n                </header>\n                <main>\n                    {/* Shows a user's saved restaurants if they are logged in, else prompts user to log in. */}\n                    {isLoggedIn\n                        ? <div id=\"res-container\">{restaurants}</div>\n                        : <p>Please sign in to see saved restaurants.</p>\n                    }\n                </main>\n                <Footer></Footer>\n            </>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport firebase, { auth, provider } from './firebase.js';\nimport { BrowserRouter as Router, Switch, Route, NavLink } from \"react-router-dom\";\n\nimport { HomePage } from './HomePage';\nimport { FormPage } from './FormPage';\nimport { ResPage } from './ResPage';\nimport { SavedPage } from './SavedPage';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.resetState = this.resetState.bind(this);\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n\n    this.state = {\n      location: '',\n      distance: '1609',\n      price: '1',\n      categories: '',\n      user: null\n    };\n\n    this.savedRef = firebase.database().ref('saved');\n  }\n\n  login() {\n    auth.signInWithPopup(provider)\n      .then((result) => {\n        const user = result.user;\n\n        this.setState({\n          user\n        });\n\n        const userRef = this.savedRef.child(user.uid);\n        userRef.on(\"value\", (snapshot) => {\n          this.setState({ saved: snapshot.val() })\n        })\n      });\n  }\n\n  logout() {\n    auth.signOut()\n      .then(() => {\n        this.setState({\n          user: null\n        });\n      });\n  }\n\n  handleChange(key, value) {\n    let stateChanges = {\n      [key]: value\n    };\n\n    this.setState(stateChanges);\n  }\n\n  resetState() {\n    let stateChanges = {\n      location: '',\n      categories: ''\n    };\n    this.setState(stateChanges);\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Navbar expand=\"lg\">\n            <Navbar.Brand><NavLink to={process.env.PUBLIC_URL + '/'}>Restaurant Picker</NavLink></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse>\n              <Nav className=\"ml-auto\">\n                <NavLink exact to={process.env.PUBLIC_URL + '/'}>Home</NavLink>\n                <NavLink exact to={process.env.PUBLIC_URL + '/form'} onClick={this.resetState}>Find Restaurants</NavLink>\n                <NavLink exact to={process.env.PUBLIC_URL + '/saved'}>Saved Restaurants</NavLink>\n              </Nav>\n  \n              {this.state.user ?\n                <button onClick={this.logout}>Log Out</button>\n                :\n                <button onClick={this.login}>Log In</button>\n              }\n            </Navbar.Collapse>\n\n          </Navbar>\n\n          <Switch>\n            <Route exact path={process.env.PUBLIC_URL + '/form'}>\n              <FormPage location={this.state.location} categories={this.state.categories} onUpdate={this.handleChange}></FormPage>\n            </Route>\n            <Route exact path={process.env.PUBLIC_URL + '/saved'}>\n              <SavedPage user={this.state.user} res={this.state.saved}></SavedPage>\n            </Route>\n            <Route exact path={process.env.PUBLIC_URL + '/res'}>\n              <ResPage user={this.state.user} formInfo={this.state} onBack={this.resetState}></ResPage>\n            </Route>\n            <Route exact path={process.env.PUBLIC_URL + '/'}>\n              <HomePage></HomePage>\n            </Route>\n          </Switch>\n\n        </div>\n      </Router>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/man-thinking.60a12e36.jpeg\";"],"sourceRoot":""}